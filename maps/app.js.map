{"version":3,"sources":["app.module.js","components/data/data.service.js","components/storage/storage.factory.js","app.config.js","app.js","components/api/api.factory.js","components/app/app.controller.js","components/lodash/lodash.factory.js","components/quiz/quiz.component.js","components/quiz/quiz.factory.js","components/stats/stats.component.js","components/stats/stats.factory.js"],"names":["_classCallCheck","instance","Constructor","TypeError","angular","module","dotaQuizConfig","$stateProvider","$urlRouterProvider","appState","url","controller","templateUrl","state","otherwise","$inject","config","API","$resource","getQuizResource","DOMAIN","vm","Quiz","factory","AppController","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","quiz","wrong","items","name","requirements","DataService","_","this","USER_API","value","_this","console","log","query","$promise","then","data","Promise","resolve","cloneDeep","sample","getItem","forEach","e","find","service","Lodash","$window","QuizController","QuizFactory","activate","start","select","unselect","component","$log","$rootScope","StatsFactory","StorageService","isDefined","getData","info","assign","_fetchQuiz","_reset","reset","item","selected","answers","unknown","_answerComplete","_validateAnswer","index","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","choices","Symbol","iterator","next","done","err","_unknownObject","getRandomQuiz","_populateData","$digest","icon","_getIconName","map","req","shuffle","concat","c","setData","iconName","toLowerCase","replace","complete","answer","sortBy","requirement","answerCorrect","isEqual","_handleCorrectAnswer","_handleIncorrectAnswer","correct","guessesLeft","incorrect","alert","getScore","alt","StatsController","isUndefined","getStats","setStats","_DefaultStats","guesses","inRow","base","bonus","score","$localStorage","stats"],"mappings":"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","file":"app.js","sourcesContent":["(function() {\n  'use strict';\n\n  angular.module('dotaQuiz', [\n    'ui.router',\n    'ngResource',\n    'ngStorage',\n    'Lodash'\n  ]);\n\n})();\n","(function() {\n\n  const quiz = [\n    {\n      \"target\": \"Medallion of Courage\",\n      \"wrong\": [\n        \"Broadsword\",\n        \"Robe of the Magi\",\n        \"Talisman of Evasion\"\n      ]\n    },\n    {\n      \"target\": \"Solar Crest\",\n      \"wrong\": [\n        \"Broadsword\",\n        \"Robe of the Magi\",\n        \"Chainmail\",\n        \"Sage's Mask\",\n        \"Recipe\"\n      ]\n    }\n  ];\n  const items = [\n    {\n      \"name\": \"Recipe\"\n    },\n    {\n      \"name\": \"Broadsword\"\n    },\n    {\n      \"name\": \"Robe of the Magi\"\n    },\n    {\n      \"name\": \"Chainmail\"\n    },\n    {\n      \"name\": \"Sage's Mask\"\n    },\n    {\n      \"name\": \"Talisman of Evasion\"\n    },\n    {\n      \"name\": \"Blade Mail\",\n      \"requirements\": [\n        \"Broadsword\",\n        \"Chainmail\",\n        \"Robe of the Magi\"\n      ]\n    },\n    {\n      \"name\": \"Medallion of Courage\",\n      \"requirements\": [\n        \"Chainmail\",\n        \"Sage's Mask\",\n        \"Recipe\"\n      ]\n    },\n    {\n      \"name\": \"Solar Crest\",\n      \"requirements\": [\n        \"Medallion of Courage\",\n        \"Talisman of Evasion\"\n      ]\n    }\n  ];\n\n  class DataService {\n    constructor(_, API) {\n      this._ = _;\n      this.API = API;\n      this.quiz = quiz;\n      this.items = items;\n\n      this.USER_API = false;\n    }\n\n    getRandomQuiz() {\n      if (this.USER_API) {\n        console.log('getting random quiz from api...');\n        return this.API.Quiz.query().$promise.then(data => data[0]);\n      } else {\n        console.log('getting random quiz from local...');\n        return new Promise(resolve => {\n          const quiz = _.cloneDeep(this._.sample(this.quiz));\n\n          quiz.target = this.getItem(quiz.target);\n\n          quiz.target.requirements.forEach((e, i) => {\n            quiz.target.requirements[i] = this.getItem(e);\n          });\n\n          quiz.wrong.forEach((e, i) => {\n            quiz.wrong[i] = this.getItem(e);\n          });\n\n          resolve(quiz);\n        });\n      }\n    }\n\n    getItem(name) {\n      return _.cloneDeep(this._.find(this.items, { name: name }));\n    }\n  }\n\n  angular\n    .module('dotaQuiz')\n    .service('DataService', DataService);\n\n})();\n","(function() {\n\n  class StorageService {\n   constructor($localStorage) {\n     this.$localStorage = $localStorage;\n   }\n\n   getStats() {\n     return this.$localStorage.stats;\n   }\n\n   setStats(stats) {\n     this.$localStorage.stats = stats;\n   }\n\n   deleteStats() {\n     delete this.$localStorage.stats;\n   }\n\n   getData() {\n     return this.$localStorage.data;\n   }\n\n   setData(data) {\n     this.$localStorage.data = data;\n   }\n\n   deleteData() {\n     delete this.$localStorage.data;\n   }\n }\n\n  angular\n    .module('dotaQuiz')\n    .service('StorageService', StorageService);\n\n})();\n","(function() {\n\n  angular.module('dotaQuiz')\n    .config(dotaQuizConfig);\n\n  function dotaQuizConfig($stateProvider, $urlRouterProvider) {\n    // Ionic uses AngularUI Router which uses the concept of states\n    // Learn more here: https://github.com/angular-ui/ui-router\n    // Set up the various states which the app can be in.\n    // Each state's controller can be found in controllers.js\n\n    const appState = {\n      url: '/',\n      controller: 'AppController as appCtrl',\n      templateUrl: 'app/app.html'\n    }\n\n    $stateProvider\n      .state('app', appState);\n\n    // if none of the above states are matched, use this as the fallback\n    $urlRouterProvider.otherwise('/');\n  }\n\n})();\n","'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('dotaQuiz', ['ui.router', 'ngResource', 'ngStorage', 'Lodash']);\n})();\n'use strict';\n\n(function () {\n\n  dotaQuizConfig.$inject = [\"$stateProvider\", \"$urlRouterProvider\"];\n  angular.module('dotaQuiz').config(dotaQuizConfig);\n\n  function dotaQuizConfig($stateProvider, $urlRouterProvider) {\n    // Ionic uses AngularUI Router which uses the concept of states\n    // Learn more here: https://github.com/angular-ui/ui-router\n    // Set up the various states which the app can be in.\n    // Each state's controller can be found in controllers.js\n\n    var appState = {\n      url: '/',\n      controller: 'AppController as appCtrl',\n      templateUrl: 'app/app.html'\n    };\n\n    $stateProvider.state('app', appState);\n\n    // if none of the above states are matched, use this as the fallback\n    $urlRouterProvider.otherwise('/');\n  }\n})();\n'use strict';\n\n(function () {\n\n  API.$inject = [\"$resource\"];\n  angular.module('dotaQuiz').factory('API', API);\n\n  function API($resource) {\n    var DOMAIN = '/api';\n\n    var vm = {\n      Quiz: getQuizResource()\n    };\n\n    return vm;\n\n    ///////////////////\n\n    function getQuizResource() {\n      return $resource(DOMAIN + '/quiz/random');\n    }\n  }\n})();\n'use strict';\n\n(function () {\n\n  angular.module('dotaQuiz').controller('AppController', AppController);\n\n  function AppController() {}\n})();\n\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n(function () {\n\n  var quiz = [{\n    \"target\": \"Medallion of Courage\",\n    \"wrong\": [\"Broadsword\", \"Robe of the Magi\", \"Talisman of Evasion\"]\n  }, {\n    \"target\": \"Solar Crest\",\n    \"wrong\": [\"Broadsword\", \"Robe of the Magi\", \"Chainmail\", \"Sage's Mask\", \"Recipe\"]\n  }];\n  var items = [{\n    \"name\": \"Recipe\"\n  }, {\n    \"name\": \"Broadsword\"\n  }, {\n    \"name\": \"Robe of the Magi\"\n  }, {\n    \"name\": \"Chainmail\"\n  }, {\n    \"name\": \"Sage's Mask\"\n  }, {\n    \"name\": \"Talisman of Evasion\"\n  }, {\n    \"name\": \"Blade Mail\",\n    \"requirements\": [\"Broadsword\", \"Chainmail\", \"Robe of the Magi\"]\n  }, {\n    \"name\": \"Medallion of Courage\",\n    \"requirements\": [\"Chainmail\", \"Sage's Mask\", \"Recipe\"]\n  }, {\n    \"name\": \"Solar Crest\",\n    \"requirements\": [\"Medallion of Courage\", \"Talisman of Evasion\"]\n  }];\n\n  var DataService = function () {\n    DataService.$inject = [\"_\", \"API\"];\n    function DataService(_, API) {\n      _classCallCheck(this, DataService);\n\n      this._ = _;\n      this.API = API;\n      this.quiz = quiz;\n      this.items = items;\n\n      this.USER_API = false;\n    }\n\n    _createClass(DataService, [{\n      key: \"getRandomQuiz\",\n      value: function getRandomQuiz() {\n        var _this = this;\n\n        if (this.USER_API) {\n          console.log('getting random quiz from api...');\n          return this.API.Quiz.query().$promise.then(function (data) {\n            return data[0];\n          });\n        } else {\n          console.log('getting random quiz from local...');\n          return new Promise(function (resolve) {\n            var quiz = _.cloneDeep(_this._.sample(_this.quiz));\n\n            quiz.target = _this.getItem(quiz.target);\n\n            quiz.target.requirements.forEach(function (e, i) {\n              quiz.target.requirements[i] = _this.getItem(e);\n            });\n\n            quiz.wrong.forEach(function (e, i) {\n              quiz.wrong[i] = _this.getItem(e);\n            });\n\n            resolve(quiz);\n          });\n        }\n      }\n    }, {\n      key: \"getItem\",\n      value: function getItem(name) {\n        return _.cloneDeep(this._.find(this.items, { name: name }));\n      }\n    }]);\n\n    return DataService;\n  }();\n\n  angular.module('dotaQuiz').service('DataService', DataService);\n})();\n'use strict';\n\n(function () {\n\n  /**\n   * Lodash wrapper module.\n   *\n   * @ngdoc module\n   * @name Lodash\n   */\n  Lodash.$inject = [\"$window\"];\n  angular.module('Lodash', []).factory('_', Lodash);\n\n  /**\n    * Expose Lo-Dash through injectable factory, so we don't pollute / rely on global namespace\n    * just inject lodash as Lodash.\n    *\n    * @ngdoc factory\n    * @name _\n    * @memberof Lodash\n    */\n  function Lodash($window) {\n    return $window._;\n  }\n})();\n'use strict';\n\n(function () {\n\n  QuizController.$inject = [\"QuizFactory\"];\n  angular.module('dotaQuiz').component('quiz', {\n    controller: QuizController,\n    templateUrl: 'quiz/quiz.html'\n  });\n\n  function QuizController(QuizFactory) {\n    var vm = this;\n\n    vm.data = QuizFactory.data;\n    vm.select = QuizFactory.select;\n    vm.unselect = QuizFactory.unselect;\n\n    activate();\n\n    ///////////////\n\n    function activate() {\n      QuizFactory.start();\n    }\n  }\n})();\n'use strict';\n\n(function () {\n\n  QuizFactory.$inject = [\"$log\", \"$rootScope\", \"_\", \"DataService\", \"StatsFactory\", \"StorageService\"];\n  angular.module('dotaQuiz').factory('QuizFactory', QuizFactory);\n\n  function QuizFactory($log, $rootScope, _, DataService, StatsFactory, StorageService) {\n    var _unknownObject = {\n      icon: 'assets/images/icon/unknown.png',\n      alt: 'Unknown Icon',\n      unknown: true\n    };\n\n    var factory = {\n      select: select,\n      unselect: unselect,\n      start: start,\n      data: {}\n    };\n\n    return factory;\n\n    ///////////////////\n\n    function start() {\n      StatsFactory.start();\n\n      if (angular.isDefined(StorageService.getData())) {\n        $log.info('using data from $localStorage...');\n        // skip fetch if there already a quiz in loca storage\n        _.assign(factory.data, StorageService.getData());\n      } else {\n        _fetchQuiz();\n      }\n    }\n\n    function _reset() {\n      StatsFactory.reset();\n      _fetchQuiz();\n    }\n\n    function select(item) {\n      if (!item.selected) {\n        for (var i in factory.data.answers) {\n          if (factory.data.answers[i].unknown === true) {\n            item.selected = true;\n            factory.data.answers[i] = item;\n            break;\n          }\n        }\n\n        if (_answerComplete()) {\n          _validateAnswer();\n        }\n      }\n    }\n\n    function unselect(index) {\n      var item = factory.data.answers[index];\n\n      if (!item.unknown) {\n        item.selected = false;\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = factory.data.choices[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var i = _step.value;\n\n            if (i.index === item.index) {\n              i.selected = false;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        factory.data.answers[index] = _.cloneDeep(_unknownObject);\n      }\n    }\n\n    function _fetchQuiz() {\n      $log.info('fetching a new quiz...');\n\n      DataService.getRandomQuiz().then(function (quiz) {\n        _populateData(quiz);\n        if (!DataService.USER_API) {\n          $rootScope.$digest();\n        }\n      });\n    }\n\n    function _populateData(quiz) {\n      quiz.target.icon = _getIconName(quiz.target.name);\n\n      var answers = quiz.target.requirements.map(function (req) {\n        return _.cloneDeep(_unknownObject);\n      });\n      var choices = _.shuffle(_.concat(quiz.target.requirements, quiz.wrong));\n      choices.forEach(function (c, i) {\n        c.icon = _getIconName(c.name);\n        c.index = i;\n      });\n\n      factory.data.target = quiz.target;\n      factory.data.answers = answers;\n      factory.data.choices = choices;\n\n      StorageService.setData(factory.data);\n    }\n\n    function _getIconName(name) {\n      var iconName = name.toLowerCase().replace(/ /g, '_');\n      return 'assets/images/icon/' + iconName + '.png';\n    }\n\n    function _answerComplete() {\n      var complete = true;\n\n      factory.data.answers.forEach(function (answer) {\n        if (answer.unknown === true) {\n          complete = false;\n        }\n      });\n\n      return complete;\n    }\n\n    function _validateAnswer() {\n      var answer = _.sortBy(factory.data.answers.map(function (answer) {\n        return answer.name;\n      }), function (e) {\n        return e;\n      });\n      var requirements = _.sortBy(factory.data.target.requirements.map(function (requirement) {\n        return requirement.name;\n      }), function (e) {\n        return e;\n      });\n\n      var answerCorrect = _.isEqual(answer, requirements);\n\n      if (answerCorrect) {\n        _handleCorrectAnswer();\n      } else {\n        _handleIncorrectAnswer();\n      }\n    }\n\n    function _handleCorrectAnswer() {\n      $log.info('correct answer!');\n      StatsFactory.correct();\n      _fetchQuiz();\n    }\n\n    function _handleIncorrectAnswer() {\n      $log.info('wrong answer. :(');\n\n      var guessesLeft = StatsFactory.incorrect();\n\n      if (guessesLeft <= 0) {\n        alert('Final Score: ' + StatsFactory.getScore());\n        _reset();\n      }\n    }\n  }\n})();\n'use strict';\n\n(function () {\n\n  StatsController.$inject = [\"StatsFactory\"];\n  angular.module('dotaQuiz').component('stats', {\n    controller: StatsController,\n    templateUrl: 'stats/stats.html'\n  });\n\n  function StatsController(StatsFactory) {\n    var vm = this;\n\n    vm.data = StatsFactory.data;\n  }\n})();\n'use strict';\n\n(function () {\n\n  StatsFactory.$inject = [\"$log\", \"StorageService\"];\n  angular.module('dotaQuiz').factory('StatsFactory', StatsFactory);\n\n  function StatsFactory($log, StorageService) {\n    var _DefaultStats = {\n      inRow: 0,\n      score: 0,\n      guesses: 3\n    };\n\n    var factory = {\n      start: start,\n      reset: reset,\n      correct: correct,\n      incorrect: incorrect,\n      getScore: getScore,\n      data: {}\n    };\n\n    return factory;\n\n    ///////////////////\n\n    function start() {\n      if (angular.isUndefined(StorageService.getStats())) {\n        StorageService.setStats(_DefaultStats);\n      } else {\n        $log.info('using stats from $localStorage...');\n      }\n\n      factory.data = StorageService.getStats();\n    }\n\n    function reset() {\n      _.assign(factory.data, _DefaultStats);\n    }\n\n    function incorrect() {\n      factory.data.guesses -= 1;\n      factory.data.inRow = 0;\n\n      return factory.data.guesses;\n    }\n\n    function correct() {\n      var base = 200;\n      var bonus = 30;\n\n      factory.data.score += base + bonus * factory.data.inRow;\n      factory.data.inRow += 1;\n    }\n\n    function getScore() {\n      return factory.data.score;\n    }\n  }\n})();\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n(function () {\n  var StorageService = function () {\n    StorageService.$inject = [\"$localStorage\"];\n    function StorageService($localStorage) {\n      _classCallCheck(this, StorageService);\n\n      this.$localStorage = $localStorage;\n    }\n\n    _createClass(StorageService, [{\n      key: 'getStats',\n      value: function getStats() {\n        return this.$localStorage.stats;\n      }\n    }, {\n      key: 'setStats',\n      value: function setStats(stats) {\n        this.$localStorage.stats = stats;\n      }\n    }, {\n      key: 'deleteStats',\n      value: function deleteStats() {\n        delete this.$localStorage.stats;\n      }\n    }, {\n      key: 'getData',\n      value: function getData() {\n        return this.$localStorage.data;\n      }\n    }, {\n      key: 'setData',\n      value: function setData(data) {\n        this.$localStorage.data = data;\n      }\n    }, {\n      key: 'deleteData',\n      value: function deleteData() {\n        delete this.$localStorage.data;\n      }\n    }]);\n\n    return StorageService;\n  }();\n\n  angular.module('dotaQuiz').service('StorageService', StorageService);\n})();","(function() {\n\n  angular\n    .module('dotaQuiz')\n    .factory('API', API);\n\n  function API($resource) {\n    const DOMAIN = `/api`;\n\n    const vm = {\n      Quiz: getQuizResource(),\n    }\n\n    return vm;\n\n    ///////////////////\n\n    function getQuizResource() {\n      return $resource(DOMAIN + `/quiz/random`);\n    }\n  }\n\n})();\n","(function() {\n\n  angular\n    .module('dotaQuiz')\n    .controller('AppController', AppController);\n\n  function AppController() {\n  }\n\n})();\n","(function() {\n\n  /**\n   * Lodash wrapper module.\n   *\n   * @ngdoc module\n   * @name Lodash\n   */\n  angular\n    .module('Lodash', [])\n    .factory('_', Lodash);\n\n  /**\n    * Expose Lo-Dash through injectable factory, so we don't pollute / rely on global namespace\n    * just inject lodash as Lodash.\n    *\n    * @ngdoc factory\n    * @name _\n    * @memberof Lodash\n    */\n  function Lodash($window) {\n      return $window._;\n  }\n\n})();\n","(function() {\n\n  angular\n    .module('dotaQuiz')\n    .component('quiz', {\n      controller: QuizController,\n      templateUrl: 'quiz/quiz.html'\n    });\n\n  function QuizController(QuizFactory) {\n    const vm = this;\n\n    vm.data = QuizFactory.data;\n    vm.select = QuizFactory.select;\n    vm.unselect = QuizFactory.unselect;\n\n    activate();\n\n    ///////////////\n\n    function activate() {\n      QuizFactory.start();\n    }\n\n  }\n\n})();\n","(function() {\n\n  angular\n    .module('dotaQuiz')\n    .factory('QuizFactory', QuizFactory);\n\n  function QuizFactory($log, $rootScope, _, DataService, StatsFactory, StorageService) {\n    const _unknownObject = {\n      icon: 'assets/images/icon/unknown.png',\n      alt: 'Unknown Icon',\n      unknown: true\n    };\n\n    const factory = {\n      select: select,\n      unselect: unselect,\n      start: start,\n      data: {}\n    }\n\n    return factory;\n\n    ///////////////////\n\n    function start() {\n      StatsFactory.start();\n\n      if (angular.isDefined(StorageService.getData())) {\n        $log.info('using data from $localStorage...');\n        // skip fetch if there already a quiz in loca storage\n        _.assign(factory.data, StorageService.getData());\n      } else {\n        _fetchQuiz();\n      }\n    }\n\n    function _reset() {\n      StatsFactory.reset();\n      _fetchQuiz();\n    }\n\n    function select(item) {\n      if (!item.selected) {\n        for (let i in factory.data.answers) {\n          if (factory.data.answers[i].unknown === true) {\n            item.selected = true;\n            factory.data.answers[i] = item;\n            break;\n          }\n        }\n\n        if (_answerComplete()) {\n          _validateAnswer();\n        }\n      }\n    }\n\n    function unselect(index) {\n      let item = factory.data.answers[index];\n\n      if (!item.unknown) {\n        item.selected = false;\n\n        for (let i of factory.data.choices) {\n          if (i.index === item.index) {\n            i.selected = false;\n          }\n        }\n\n        factory.data.answers[index] = _.cloneDeep(_unknownObject);\n      }\n    }\n\n    function _fetchQuiz() {\n      $log.info('fetching a new quiz...');\n\n      DataService.getRandomQuiz().then(quiz => {\n        _populateData(quiz);\n        if (!DataService.USER_API) {\n          $rootScope.$digest();\n        }\n      });\n    }\n\n    function _populateData(quiz) {\n      quiz.target.icon = _getIconName(quiz.target.name);\n\n      const answers = quiz.target.requirements.map(req => _.cloneDeep(_unknownObject));\n      const choices = _.shuffle(_.concat(quiz.target.requirements, quiz.wrong));\n      choices.forEach((c, i) => {\n        c.icon = _getIconName(c.name)\n        c.index = i;\n      });\n\n      factory.data.target = quiz.target;\n      factory.data.answers = answers;\n      factory.data.choices = choices;\n\n      StorageService.setData(factory.data);\n    }\n\n    function _getIconName(name) {\n      const iconName = name.toLowerCase().replace(/ /g, '_');\n      return `assets/images/icon/${iconName}.png`;\n    }\n\n    function _answerComplete() {\n      let complete = true;\n\n      factory.data.answers.forEach(answer => {\n        if (answer.unknown === true) {\n          complete = false;\n        }\n      });\n\n      return complete;\n    }\n\n    function _validateAnswer() {\n      const answer = _.sortBy(factory.data.answers.map(answer => answer.name), e => e);\n      const requirements = _.sortBy(factory.data.target.requirements.map(requirement => requirement.name), e => e);\n\n      const answerCorrect = _.isEqual(answer, requirements);\n\n      if (answerCorrect) {\n        _handleCorrectAnswer();\n      } else {\n        _handleIncorrectAnswer();\n      }\n    }\n\n    function _handleCorrectAnswer() {\n      $log.info('correct answer!');\n      StatsFactory.correct();\n      _fetchQuiz();\n    }\n\n    function _handleIncorrectAnswer() {\n      $log.info('wrong answer. :(');\n\n      const guessesLeft = StatsFactory.incorrect();\n\n      if (guessesLeft <= 0) {\n        alert(`Final Score: ${StatsFactory.getScore()}`);\n        _reset();\n      }\n    }\n  }\n\n})();\n","(function() {\n\n  angular\n    .module('dotaQuiz')\n    .component('stats', {\n      controller: StatsController,\n      templateUrl: 'stats/stats.html'\n    });\n\n  function StatsController(StatsFactory) {\n    const vm = this;\n\n    vm.data = StatsFactory.data;\n  }\n\n})();\n","(function() {\n\n  angular\n    .module('dotaQuiz')\n    .factory('StatsFactory', StatsFactory);\n\n  function StatsFactory($log, StorageService) {\n    const _DefaultStats = {\n      inRow: 0,\n      score: 0,\n      guesses: 3\n    }\n\n    const factory = {\n      start: start,\n      reset: reset,\n      correct: correct,\n      incorrect: incorrect,\n      getScore: getScore,\n      data: {}\n    }\n\n    return factory;\n\n    ///////////////////\n\n    function start() {\n      if (angular.isUndefined(StorageService.getStats())) {\n        StorageService.setStats(_DefaultStats);\n      } else {\n        $log.info('using stats from $localStorage...');\n      }\n\n      factory.data = StorageService.getStats();\n    }\n\n    function reset() {\n      _.assign(factory.data, _DefaultStats);\n    }\n\n    function incorrect() {\n      factory.data.guesses -= 1;\n      factory.data.inRow = 0;\n\n      return factory.data.guesses;\n    }\n\n    function correct() {\n      const base = 200;\n      const bonus = 30;\n\n      factory.data.score += base + (bonus * factory.data.inRow);\n      factory.data.inRow += 1;\n    }\n\n    function getScore() {\n      return factory.data.score;\n    }\n  }\n\n})();\n"],"sourceRoot":"/source/"}